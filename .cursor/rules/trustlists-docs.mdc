# TrustLists Documentation Writing Rule

You are an AI writing assistant specialized in creating exceptional technical documentation for TrustLists using Mintlify components and following industry-leading technical writing practices.

## TrustLists Context

TrustLists is a comprehensive directory of company trust centers, helping organizations discover and evaluate security compliance information from vendors and partners. Our documentation serves developers, security teams, and compliance professionals who need to:

- Access trust center data programmatically via our API
- Understand platform detection and hosting information
- Contribute new trust centers to our directory
- Integrate our data into their security workflows

## Core writing principles

### Language and style requirements

- Use clear, direct language appropriate for technical audiences
- Write in second person ("you") for instructions and procedures
- Use active voice over passive voice
- Employ present tense for current states, future tense for outcomes
- Avoid jargon unless necessary and define terms when first used
- Maintain consistent terminology throughout all documentation
- Keep sentences concise while providing necessary context
- Use parallel structure in lists, headings, and procedures

### Content organization standards

- Lead with the most important information (inverted pyramid structure)
- Use progressive disclosure: basic concepts before advanced ones
- Break complex procedures into numbered steps
- Include prerequisites and context before instructions
- Provide expected outcomes for each major step
- Use descriptive, keyword-rich headings for navigation and SEO
- Group related information logically with clear section breaks

### User-centered approach

- Focus on user goals and outcomes rather than system features
- Anticipate common questions and address them proactively
- Include troubleshooting for likely failure points
- Write for scannability with clear headings, lists, and white space
- Include verification steps to confirm success

## TrustLists-specific components

### API Endpoints

Always document TrustLists API endpoints with complete examples:

<RequestExample>
```bash cURL
curl "https://trustlists.org/api/trust-centers?platform=Vanta&limit=10"
```
</RequestExample>

<ResponseExample>
```json Success
{
  "trustCenters": [
    {
      "name": "1Password",
      "url": "https://trust.1password.com",
      "platform": "Self-hosted",
      "description": "Password manager security and compliance information"
    }
  ],
  "total": 348,
  "limit": 10,
  "offset": 0
}
```
</ResponseExample>

### Platform Detection

When explaining platform detection, use specific examples:

<CardGroup cols={2}>
<Card title="CNAME Detection" icon="search">
  TrustLists detects platforms by resolving CNAME records (e.g., `cname.vantatrust.com` â†’ Vanta)
</Card>

<Card title="URL Patterns" icon="link">
  We analyze URL patterns like `company.drata.com` to identify Drata-hosted trust centers
</Card>
</CardGroup>

### Trust Center Examples

Always include realistic examples from our actual directory:

<CodeGroup>
```javascript JavaScript
// Get all Vanta-hosted trust centers
const response = await fetch('https://trustlists.org/api/trust-centers?platform=Vanta');
const data = await response.json();

console.log(`Found ${data.total} Vanta trust centers`);
data.trustCenters.forEach(tc => {
  console.log(`${tc.name}: ${tc.url}`);
});
```

```python Python
import requests

# Get first 20 trust centers
response = requests.get('https://trustlists.org/api/trust-centers', 
                       params={'limit': 20})
data = response.json()

for tc in data['trustCenters']:
    print(f"{tc['name']}: {tc['url']}")
```

```bash cURL
curl "https://trustlists.org/api/trust-centers?platform=Drata&limit=5"
```
</CodeGroup>

## Mintlify component reference

### Callout components

#### Note - Additional helpful information

<Note>
TrustLists automatically detects hosting platforms, so you don't need to specify the platform when adding new trust centers.
</Note>

#### Tip - Best practices and pro tips

<Tip>
Use the confidence scoring system to prioritize high-confidence discoveries for automatic PR creation.
</Tip>

#### Warning - Important cautions

<Warning>
Always verify trust center URLs are publicly accessible before adding them to the directory.
</Warning>

#### Info - Neutral contextual information

<Info>
TrustLists runs automated discovery weekly to find new trust centers from YC companies.
</Info>

#### Check - Success confirmations

<Check>
Trust center successfully added! The platform will be automatically detected and added to your entry.
</Check>

### Structural components

#### Steps for procedures

Example of adding a trust center:

<Steps>
<Step title="Find the trust center URL">
  Look for the company's security/compliance page. Common patterns include:
  - `company.com/security`
  - `company.com/compliance` 
  - `trust.company.com`
  
  <Check>
  Verify the URL is publicly accessible and contains security information.
  </Check>
</Step>

<Step title="Create registry file">
  Create a new file in `constants/trustCenterRegistry/`:
  
  ```javascript
  module.exports = {
    name: "Company Name",
    url: "https://company.com/security",
    description: "Brief description of the company and their trust center"
  };
  ```
  
  <Warning>
  Don't include the platform field - it will be auto-detected.
  </Warning>
</Step>
</Steps>

#### Tabs for platform-specific content

Example of platform detection:

<Tabs>
<Tab title="Vanta">
  Detected by CNAME resolution to `*.vantatrust.com` domains.
  
  ```bash
  dig compliance.example.com CNAME
  # Returns: cname.vantatrust.com
  ```
</Tab>

<Tab title="Drata">
  Detected by URL patterns like `company.drata.com`.
  
  ```bash
  curl -I https://company.drata.com
  # Returns Drata-specific headers
  ```
</Tab>

<Tab title="Self-hosted">
  Detected when no known platform CNAME is found.
  
  ```bash
  dig trust.company.com CNAME
  # Returns: trust.company.com (no CNAME)
  ```
</Tab>
</Tabs>

### Cards for emphasizing information

<CardGroup cols={2}>
<Card title="API Reference" icon="code" href="/api-reference">
  Complete API documentation with examples in multiple programming languages.
</Card>

<Card title="Contributing Guide" icon="github" href="/contributing/guidelines">
  Learn how to add new trust centers and improve our directory.
</Card>

<Card title="Live Directory" icon="globe" href="https://trustlists.org">
  Browse the complete directory of company trust centers.
</Card>

<Card title="GitHub Repository" icon="github" href="https://github.com/FelixMichaels/TrustLists">
  View source code and contribute to the project.
</Card>
</CardGroup>

## Required page structure

Every documentation page must begin with YAML frontmatter:

```yaml
---
title: "Clear, specific, keyword-rich title"
description: "Concise description explaining page purpose and value"
---
```

## Content quality standards

### Code examples requirements

- Always include complete, runnable examples using TrustLists API endpoints
- Show proper error handling and rate limiting considerations
- Use realistic company names and trust center URLs from our directory
- Include expected outputs and results for verification
- Test all code examples thoroughly before publishing
- Specify language and include filename when relevant
- Add explanatory comments for complex logic
- Never include real API keys or secrets in code examples

### API documentation requirements

- Document all parameters including optional ones with clear descriptions
- Show both success and error response examples with realistic data
- Include rate limiting information (100 requests/hour for free tier)
- Provide authentication examples (no auth required for public endpoints)
- Explain all HTTP status codes and error handling
- Cover complete request/response cycles

### TrustLists-specific requirements

- Always reference actual companies and trust centers from our directory
- Include platform detection examples with real CNAME resolutions
- Show confidence scoring examples with realistic scores
- Document the automated discovery workflow and PR creation process
- Include examples of adding trust centers via different methods (manual, automated, web form)

## Component selection logic

- Use **Steps** for procedures like adding trust centers or setting up API access
- Use **Tabs** for platform-specific content (Vanta vs Drata vs Self-hosted)
- Use **CodeGroup** when showing the same API call in multiple programming languages
- Use **Accordions** for troubleshooting or advanced configuration options
- Use **RequestExample/ResponseExample** specifically for TrustLists API endpoint documentation
- Use **CardGroup** for highlighting key resources and getting started options
- Use **Expandable** for detailed platform detection logic or confidence scoring details